def parse_stats(file_path):
	"""Parses the stats.txt file and returns a dictionary of statistics."""
	stats = {}
	with open(file_path, 'r') as file:
		for line in file:
			parts = line.split()
			# Enure the line has the correct structure (key-value pairs)
			if len(parts) == 2:
				key, value = parts
				try:
					stats[key] = float(value)
				except ValueError:
					print(f"Warning: Couldn't parse value for {key}")
	return stats

def calculate_cache_metrics(stats):
	"""Calculates and prints cache hit and miss rates."""
	# Instruction cache metrics
	icache_hits = stats.get('system.cpu.icache.demandHits::total', 0)
	icache_misses = stats.get('system.cpu.icache.demandMisses::total', 0)

	# Data cache metrics
	dcache_hits = stats.get('system.cpu.dcache.demandHits::total', 0)
	dcache_misses = stats.get('system.cpu.dcache.demandMisses::total', 0)

	# Calaculate hit and miss rate
	if icache_hits + icache_misses > 0:
		icache_hit_rate = icache_hits / (icache_hits + icache_misses) * 100
	else:
		icache_hit_rate = 0.0
	if dcache_hits + dcache_misses > 0:
		dcache_hit_rate = dcache_hits / (dcache_hits + dcache_misses) * 100
	else:
		dcache_hit_rate = 0.0

	print(f"Instruction Cache Hit Rate: {icache_hit_rate:.2f}%")
#	print(f"Instruction Cache Miss Rate: {icache_miss_rate:.2f}%")
	print(f"Data Cache Hit Rate: {dcache_hit_rate:.2f}%")
#	print(f"Data Cache Miss Rate: {dcache_miss_rate:.2f}%")

def calculate_avg_latency(stats):
	"""Calculates and prints average memory access latency."""
	total_latency = stats.get('system.cpu.dcache.overallMissLatency::total', 0)
	total_accesses = stats.get('system.cpu.dcache.overallMissRate::total', 1) #Avoid divide by zero

	if total_accesses > 0:
		avg_latency = total_latency / total_accesses
		print(f"Average Memory Access Latency: {avg_latency:.2f} ticks")
	else:
		print("No memory accesses recorded")

#Main function to parse the stats and calculate performance metrics
def main():
	# Provide the path to the stats.txt file generated by Gem5
	stats_file = '/home/shivay/gem5/m5out/stats.txt'
	stats = parse_stats(stats_file)

	# Debugging: print all the parsed stats to check keys and values
	for key, value in stats.items():
		print(f"{key}: {value}")

	# Calculate and display the cache hit/miss rates
	calculate_cache_metrics(stats)

	# Calculate and display the average memory access latency
	calculate_avg_latency(stats)

if __name__ == '__main__':
	main()
